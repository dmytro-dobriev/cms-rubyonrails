# encoding: utf-8
require "spec_helper"

module Refinery
  module <%= namespacing %>
    describe "Admin" do
      describe "<%= plural_name %>" do
        refinery_login_with :refinery_user
<% if (title = attributes.detect { |a| a.type.to_s == "string" }).present? %>

       describe "<%= plural_name %> list" do
          before do
            FactoryGirl.create(:<%= singular_name %>, :<%= title.name %> => "UniqueTitleOne")
            FactoryGirl.create(:<%= singular_name %>, :<%= title.name %> => "UniqueTitleTwo")
          end

          it "shows two items" do
            visit refinery.<%= namespacing.underscore %>_admin_<%= plural_name %>_path
            page.should have_content("UniqueTitleOne")
            page.should have_content("UniqueTitleTwo")
          end
        end

      <% if include_spam? %>
        describe "mark as ham" do

          it "should succeed" do
            visit refinery.<%= namespacing.underscore %>_admin_<%= plural_name %>_path

            within ".actions" do
              click_link "Mark as ham"
            end

            fail("Implement this test")
        end

        describe "mark as spam" do
          before { FactoryGirl.create(:<%= singular_name %>, :<%= title.name %> => "A <%= title.name %>") }

          it "should succeed" do
            visit refinery.<%= namespacing.underscore %>_admin_<%= plural_name %>_path

            within ".actions" do
              click_link "Mark as spam"
            end

            fail("Implement this test")

    end
          end
        end
      <% end %>

        describe "destroy" do
          before { FactoryGirl.create(:<%= singular_name %>, :<%= title.name %> => "UniqueTitleOne") }

          it "should succeed" do
            visit refinery.<%= namespacing.underscore %>_admin_<%= plural_name %>_path

            click_link "Remove this <%= singular_name.titleize.downcase %> forever"

            page.should have_content("'UniqueTitleOne' was successfully removed.")
            Refinery::<%= namespacing %>::<%= class_name %>.count.should == 0
          end
        end
<% end %>
      end
    end
  end
end
