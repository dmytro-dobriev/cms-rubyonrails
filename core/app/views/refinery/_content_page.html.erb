<%
  # supported variables for this partial and their default values
  sections_to_hide = local_assigns[:hide_sections] || []
  content_page = local_assigns[:sections]
  allowed_to_use_fallback = !local_assigns[:show_empty_sections] && !local_assigns[:remove_automatic_sections]

  if content_page
    if !content_page.is_a?(Refinery::Pages::ContentPagePresenter)
      raise ArgumentError.new("Sections passed to the content page partial must be Refinery::Pages::SectionPresenter objects inside a Refinery::Pages::ContentPagePresenter")
    end
  else
    content_page = Refinery::Pages::ContentPagePresenter.build_for_page(@page, page_title)
  end

  content_page.hide_sections(sections_to_hide)
  content_page.fetch_template_overrides {|section_id| content_for(section_id)}
-%>
<section id='body_content' class='<%= content_page.blank_section_css_classes(allowed_to_use_fallback).join(' ') %>'>
  <%= content_page.to_html(allowed_to_use_fallback) -%>
</section>
<%= render :partial => '/refinery/draft_page_message' unless @page.nil? or @page.live? -%>
